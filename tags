!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	D:/42/Art/Programs/C++/New/WrongVirus2/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
CommandPool	./VulkanWrappers/CommandPool.cpp	/^CommandPool::CommandPool(CommandPool&& rhs) :$/;"	f	class:CommandPool
CommandPool	./VulkanWrappers/CommandPool.cpp	/^CommandPool::CommandPool(VkDevice device, const VkCommandPoolCreateInfo& createInfo) :$/;"	f	class:CommandPool
CommandPool	./VulkanWrappers/CommandPool.h	/^class CommandPool$/;"	c
DebugUtilsMessenger	./VulkanWrappers/DebugUtilsMessenger.cpp	/^DebugUtilsMessenger::DebugUtilsMessenger(DebugUtilsMessenger&& rhs) :$/;"	f	class:DebugUtilsMessenger
DebugUtilsMessenger	./VulkanWrappers/DebugUtilsMessenger.cpp	/^DebugUtilsMessenger::DebugUtilsMessenger(VkInstance instance, const VkDebugUtilsMessengerCreateI/;"	f	class:DebugUtilsMessenger
DebugUtilsMessenger	./VulkanWrappers/DebugUtilsMessenger.h	/^class DebugUtilsMessenger$/;"	c
Fence	./VulkanWrappers/Fence.cpp	/^Fence::Fence(Fence&& rhs) :$/;"	f	class:Fence
Fence	./VulkanWrappers/Fence.cpp	/^Fence::Fence(VkDevice device, const VkFenceCreateInfo& createInfo) :$/;"	f	class:Fence
Fence	./VulkanWrappers/Fence.h	/^class Fence$/;"	c
Framebuffer	./VulkanWrappers/Framebuffer.cpp	/^Framebuffer::Framebuffer() :$/;"	f	class:Framebuffer
Framebuffer	./VulkanWrappers/Framebuffer.cpp	/^Framebuffer::Framebuffer(Framebuffer&& rhs) :$/;"	f	class:Framebuffer
Framebuffer	./VulkanWrappers/Framebuffer.cpp	/^Framebuffer::Framebuffer(VkDevice device, const VkFramebufferCreateInfo& createInfo) :$/;"	f	class:Framebuffer
Framebuffer	./VulkanWrappers/Framebuffer.h	/^class Framebuffer$/;"	c
GLFW_INCLUDE_VULKAN	./GLFWwrappers/VulkanWithGLFW.h	/^#define GLFW_INCLUDE_VULKAN$/;"	d
GLFWmanager	./GLFWwrappers/GLFWmanager.cpp	/^GLFWmanager::GLFWmanager()$/;"	f	class:GLFWmanager
GLFWmanager	./GLFWwrappers/GLFWmanager.h	/^class GLFWmanager$/;"	c
GLFWwrappers	./GLFWwrappers/CMakeLists.txt	/^add_library(GLFWwrappers GLFWmanager.cpp Window.cpp)$/;"	t
ImageView	./VulkanWrappers/ImageView.cpp	/^ImageView::ImageView(ImageView&& rhs) :$/;"	f	class:ImageView
ImageView	./VulkanWrappers/ImageView.cpp	/^ImageView::ImageView(VkDevice device, const VkImageViewCreateInfo& createInfo) :$/;"	f	class:ImageView
ImageView	./VulkanWrappers/ImageView.h	/^class ImageView$/;"	c
Instance	./VulkanWrappers/Instance.cpp	/^Instance::Instance(Instance&& rhs) :$/;"	f	class:Instance
Instance	./VulkanWrappers/Instance.cpp	/^Instance::Instance(const VkInstanceCreateInfo& createInfo)$/;"	f	class:Instance
Instance	./VulkanWrappers/Instance.h	/^class Instance$/;"	c
LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::LogicalDevice() :$/;"	f	class:LogicalDevice
LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::LogicalDevice(LogicalDevice&& rhs) :$/;"	f	class:LogicalDevice
LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::LogicalDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo& createIn/;"	f	class:LogicalDevice
LogicalDevice	./VulkanWrappers/LogicalDevice.h	/^class LogicalDevice$/;"	c
Pipeline	./VulkanWrappers/Pipeline.cpp	/^Pipeline::Pipeline($/;"	f	class:Pipeline
Pipeline	./VulkanWrappers/Pipeline.cpp	/^Pipeline::Pipeline(Pipeline&& rhs) :$/;"	f	class:Pipeline
Pipeline	./VulkanWrappers/Pipeline.h	/^class Pipeline$/;"	c
PipelineLayout	./VulkanWrappers/PipelineLayout.cpp	/^PipelineLayout::PipelineLayout($/;"	f	class:PipelineLayout
PipelineLayout	./VulkanWrappers/PipelineLayout.cpp	/^PipelineLayout::PipelineLayout(PipelineLayout&& rhs) :$/;"	f	class:PipelineLayout
PipelineLayout	./VulkanWrappers/PipelineLayout.h	/^class PipelineLayout$/;"	c
QueueFamily	./VulkanWrappers/LogicalDevice.h	/^struct QueueFamily$/;"	s
RenderPass	./VulkanWrappers/RenderPass.cpp	/^RenderPass::RenderPass(RenderPass&& rhs) :$/;"	f	class:RenderPass
RenderPass	./VulkanWrappers/RenderPass.cpp	/^RenderPass::RenderPass(VkDevice device, const VkRenderPassCreateInfo& createInfo) :$/;"	f	class:RenderPass
RenderPass	./VulkanWrappers/RenderPass.h	/^class RenderPass$/;"	c
Rendering	./Rendering/CMakeLists.txt	/^add_library(Rendering InstanceHelpers.cpp RenderingDevice.cpp ImageViewHelpers.cpp RenderPassHel/;"	t
RenderingDevice	./Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(RenderingDevice&& rhs) :$/;"	f	class:RenderingDevice
RenderingDevice	./Rendering/RenderingDevice.cpp	/^RenderingDevice::RenderingDevice(VkInstance instance, VkSurfaceKHR surface)$/;"	f	class:RenderingDevice
RenderingDevice	./Rendering/RenderingDevice.h	/^class RenderingDevice : public LogicalDevice$/;"	c
RenderingFramebuffer	./Rendering/RenderingFramebuffer.cpp	/^RenderingFramebuffer::RenderingFramebuffer(RenderingFramebuffer&& rhs) :$/;"	f	class:RenderingFramebuffer
RenderingFramebuffer	./Rendering/RenderingFramebuffer.cpp	/^RenderingFramebuffer::RenderingFramebuffer(VkDevice device, VkRenderPass renderPass, GLFWwindow*/;"	f	class:RenderingFramebuffer
RenderingFramebuffer	./Rendering/RenderingFramebuffer.h	/^class RenderingFramebuffer : public Framebuffer$/;"	c
RenderingManager	./Rendering/RenderingManager.cpp	/^RenderingManager::RenderingManager() :$/;"	f	class:RenderingManager
RenderingManager	./Rendering/RenderingManager.h	/^class RenderingManager$/;"	c
RenderingManager	Rendering/RenderingManager.cpp	/^RenderingManager::RenderingManager() :$/;"	f	class:RenderingManager
RenderingSwapchain	./Rendering/RenderingSwapchain.cpp	/^RenderingSwapchain::RenderingSwapchain($/;"	f	class:RenderingSwapchain
RenderingSwapchain	./Rendering/RenderingSwapchain.cpp	/^RenderingSwapchain::RenderingSwapchain(RenderingSwapchain&& rhs) :$/;"	f	class:RenderingSwapchain
RenderingSwapchain	./Rendering/RenderingSwapchain.h	/^class RenderingSwapchain : public Swapchain$/;"	c
Semaphore	./VulkanWrappers/Semaphore.cpp	/^Semaphore::Semaphore(Semaphore&& rhs) :$/;"	f	class:Semaphore
Semaphore	./VulkanWrappers/Semaphore.cpp	/^Semaphore::Semaphore(VkDevice device, const VkSemaphoreCreateInfo& createInfo) :$/;"	f	class:Semaphore
Semaphore	./VulkanWrappers/Semaphore.h	/^class Semaphore$/;"	c
ShaderModule	./VulkanWrappers/ShaderModule.cpp	/^ShaderModule::ShaderModule(ShaderModule&& rhs) :$/;"	f	class:ShaderModule
ShaderModule	./VulkanWrappers/ShaderModule.cpp	/^ShaderModule::ShaderModule(VkDevice device, const VkShaderModuleCreateInfo& createInfo) :$/;"	f	class:ShaderModule
ShaderModule	./VulkanWrappers/ShaderModule.h	/^class ShaderModule$/;"	c
Surface	./VulkanWrappers/Surface.cpp	/^Surface::Surface(Surface&& rhs) :$/;"	f	class:Surface
Surface	./VulkanWrappers/Surface.cpp	/^Surface::Surface(VkInstance instance, GLFWwindow* window) :$/;"	f	class:Surface
Surface	./VulkanWrappers/Surface.h	/^class Surface$/;"	c
Swapchain	./VulkanWrappers/Swapchain.cpp	/^Swapchain::Swapchain() :$/;"	f	class:Swapchain
Swapchain	./VulkanWrappers/Swapchain.cpp	/^Swapchain::Swapchain(Swapchain&& rhs) :$/;"	f	class:Swapchain
Swapchain	./VulkanWrappers/Swapchain.cpp	/^Swapchain::Swapchain(VkDevice device, const VkSwapchainCreateInfoKHR& createInfo) :$/;"	f	class:Swapchain
Swapchain	./VulkanWrappers/Swapchain.h	/^class Swapchain$/;"	c
Utility	./Utility/CMakeLists.txt	/^add_library(Utility Utility.cpp)$/;"	t
VK_CHECK	./GLFWwrappers/VulkanWithGLFW.h	/^#define VK_CHECK(/;"	d
Vertex	./Rendering/Vertex.h	/^struct Vertex$/;"	s
VulkanWrappers	./VulkanWrappers/CMakeLists.txt	/^add_library(VulkanWrappers Instance.cpp LogicalDevice.cpp RenderPass.cpp Fence.cpp Semaphore.cpp/;"	t
Window	./GLFWwrappers/Window.cpp	/^Window::Window()$/;"	f	class:Window
Window	./GLFWwrappers/Window.h	/^class Window$/;"	c
WrongVirus2	./CMakeLists.txt	/^project(WrongVirus2)$/;"	p
__anone99712860102	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkLayerProperties>([](uint32_t* count, VkLayerProperties* elements) {$/;"	f	function:enumerateInstanceLayerProperties	file:
__anone99712860202	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkExtensionProperties>([pLayerName](uint32_t* count, VkExtensionProperties* elem/;"	f	function:enumerateInstanceExtensionProperties	file:
__anone99712860302	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkPhysicalDevice>([instance](uint32_t* count, VkPhysicalDevice* elements) {$/;"	f	function:enumeratePhysicalDevices	file:
__anone99712860402	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkQueueFamilyProperties>([physicalDevice](uint32_t* count, VkQueueFamilyProperti/;"	f	function:getPhysicalDeviceQueueFamilyProperties	file:
__anone99712860502	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkExtensionProperties>([physicalDevice, pLayerName](uint32_t* count, VkExtension/;"	f	function:enumerateDeviceExtensionProperties	file:
__anone99712860602	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkSurfaceFormatKHR>([physicalDevice, surface](uint32_t* count, VkSurfaceFormatKH/;"	f	function:getPhysicalDeviceSurfaceFormatsKHR	file:
__anone99712860702	./VulkanWrappers/EnumerationHelpers.h	/^	enumerateArray<VkImage>([device, swapchain](uint32_t* count, VkImage* elements) {$/;"	f	function:getSwapchainImagesKHR	file:
acquiredImageSemaphore	./Rendering/RenderingManager.h	/^    Semaphore acquiredImageSemaphore, finishedRenderingSemaphore;$/;"	m	class:RenderingManager	typeref:typename:Semaphore
areExtensionsSupported	./Rendering/InstanceHelpers.cpp	/^bool areExtensionsSupported(const std::vector<const char*>& extensions)$/;"	f	typeref:typename:bool
areLayersSupported	./Rendering/InstanceHelpers.cpp	/^bool areLayersSupported(const std::vector<const char*>& layers)$/;"	f	typeref:typename:bool
checkVkResult	./GLFWwrappers/VulkanWithGLFW.h	/^inline void checkVkResult(VkResult result, const char* filename, int lineNumber)$/;"	f	typeref:typename:void
clamp	./Utility/Utility.h	/^T clamp(T x, T min, T max)$/;"	f	typeref:typename:T
color	./Rendering/Vertex.h	/^    vec3 position, color;$/;"	m	struct:Vertex	typeref:typename:vec3
commandBuffer	./Rendering/RenderingManager.h	/^    VkCommandBuffer commandBuffer;$/;"	m	class:RenderingManager	typeref:typename:VkCommandBuffer
commandPool	./Rendering/RenderingManager.h	/^    CommandPool commandPool;$/;"	m	class:RenderingManager	typeref:typename:CommandPool
createBinarySemaphore	./Rendering/SynchronizationHelpers.cpp	/^Semaphore createBinarySemaphore(VkDevice device)$/;"	f	typeref:typename:Semaphore
createDebugger	./Rendering/DebugUtilsMessengerHelpers.cpp	/^DebugUtilsMessenger createDebugger(VkInstance instance)$/;"	f	typeref:typename:DebugUtilsMessenger
createEmptyPipelineLayout	./Rendering/GraphicsPipelineHelpers.cpp	/^PipelineLayout createEmptyPipelineLayout(VkDevice device)$/;"	f	typeref:typename:PipelineLayout
createFence	./Rendering/SynchronizationHelpers.cpp	/^Fence createFence(VkDevice device)$/;"	f	typeref:typename:Fence
createRenderingCommandPool	./Rendering/CommandPoolHelpers.cpp	/^CommandPool createRenderingCommandPool(VkDevice device, uint32_t graphicsQueueFamilyIndex)$/;"	f	typeref:typename:CommandPool
createRenderingImageView	./Rendering/ImageViewHelpers.cpp	/^ImageView createRenderingImageView(VkDevice device, VkImage image)$/;"	f	typeref:typename:ImageView
createRenderingInstance	./Rendering/InstanceHelpers.cpp	/^Instance createRenderingInstance()$/;"	f	typeref:typename:Instance
createRenderingPipeline	./Rendering/GraphicsPipelineHelpers.cpp	/^Pipeline createRenderingPipeline($/;"	f	typeref:typename:Pipeline
createRenderingRenderPass	./Rendering/RenderPassHelpers.cpp	/^RenderPass createRenderingRenderPass(VkDevice device)$/;"	f	typeref:typename:RenderPass
createShaderModule	./Rendering/GraphicsPipelineHelpers.cpp	/^ShaderModule createShaderModule(VkDevice device, const std::vector<char>& code)$/;"	f	typeref:typename:ShaderModule
debugCallback	./Rendering/DebugUtilsMessengerHelpers.cpp	/^VkBool32 VKAPI_PTR debugCallback($/;"	f	typeref:typename:VkBool32 VKAPI_PTR
debugMessenger	./Rendering/RenderingManager.h	/^    DebugUtilsMessenger debugMessenger;$/;"	m	class:RenderingManager	typeref:typename:DebugUtilsMessenger
defaultQueuePriority	./Rendering/RenderingDevice.cpp	/^const float defaultQueuePriority = 1.0f;$/;"	v	typeref:typename:const float
device	./Rendering/RenderingManager.h	/^    RenderingDevice device;$/;"	m	class:RenderingManager	typeref:typename:RenderingDevice
device	./VulkanWrappers/CommandPool.h	/^    VkDevice device;$/;"	m	class:CommandPool	typeref:typename:VkDevice
device	./VulkanWrappers/Fence.h	/^    VkDevice device;$/;"	m	class:Fence	typeref:typename:VkDevice
device	./VulkanWrappers/Framebuffer.h	/^    VkDevice device;$/;"	m	class:Framebuffer	typeref:typename:VkDevice
device	./VulkanWrappers/ImageView.h	/^    VkDevice device;$/;"	m	class:ImageView	typeref:typename:VkDevice
device	./VulkanWrappers/Pipeline.h	/^    VkDevice device;$/;"	m	class:Pipeline	typeref:typename:VkDevice
device	./VulkanWrappers/PipelineLayout.h	/^    VkDevice device;$/;"	m	class:PipelineLayout	typeref:typename:VkDevice
device	./VulkanWrappers/RenderPass.h	/^    VkDevice device;$/;"	m	class:RenderPass	typeref:typename:VkDevice
device	./VulkanWrappers/Semaphore.h	/^    VkDevice device;$/;"	m	class:Semaphore	typeref:typename:VkDevice
device	./VulkanWrappers/ShaderModule.h	/^    VkDevice device;$/;"	m	class:ShaderModule	typeref:typename:VkDevice
device	./VulkanWrappers/Swapchain.h	/^    VkDevice device;$/;"	m	class:Swapchain	typeref:typename:VkDevice
doesPhysicalDeviceSupportExtensions	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportExtensions($/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportFeatures	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportFeatures($/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportRequiredQueueCapabilities	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportRequiredQueueCapabilities(VkInstance instance, VkPhysicalDevice ph/;"	f	typeref:typename:bool
doesPhysicalDeviceSupportRequiredSurfaceFormats	./Rendering/RenderingDevice.cpp	/^bool doesPhysicalDeviceSupportRequiredSurfaceFormats(VkPhysicalDevice physicalDevice, VkSurfaceK/;"	f	typeref:typename:bool
draw	./Rendering/RenderingManager.cpp	/^void RenderingManager::draw(const std::vector<Vertex>& buffer)$/;"	f	class:RenderingManager	typeref:typename:void
draw	Rendering/RenderingManager.cpp	/^void RenderingManager::draw(const std::vector<Vertex>& buffer)$/;"	f	class:RenderingManager	typeref:typename:void
enumerateArray	./VulkanWrappers/EnumerationHelpers.h	/^std::vector<T> enumerateArray(std::function<VkResult(uint32_t*, T*)> enumerator)$/;"	f	typeref:typename:std::vector<T>
enumerateDeviceExtensionProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkExtensionProperties> enumerateDeviceExtensionProperties($/;"	f	typeref:typename:std::vector<VkExtensionProperties>
enumerateInstanceExtensionProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkExtensionProperties> enumerateInstanceExtensionProperties(const char* pLaye/;"	f	typeref:typename:std::vector<VkExtensionProperties>
enumerateInstanceLayerProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkLayerProperties> enumerateInstanceLayerProperties()$/;"	f	typeref:typename:std::vector<VkLayerProperties>
enumeratePhysicalDevices	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkPhysicalDevice> enumeratePhysicalDevices(VkInstance instance)$/;"	f	typeref:typename:std::vector<VkPhysicalDevice>
findPhysicalDevice	./Rendering/RenderingDevice.cpp	/^VkPhysicalDevice findPhysicalDevice(VkInstance instance, VkSurfaceKHR surface)$/;"	f	typeref:typename:VkPhysicalDevice
finishedRenderingFence	./Rendering/RenderingManager.h	/^    Fence finishedRenderingFence;$/;"	m	class:RenderingManager	typeref:typename:Fence
finishedRenderingSemaphore	./Rendering/RenderingManager.h	/^    Semaphore acquiredImageSemaphore, finishedRenderingSemaphore;$/;"	m	class:RenderingManager	typeref:typename:Semaphore
framebuffers	./Rendering/RenderingSwapchain.h	/^    std::vector<RenderingFramebuffer> framebuffers;$/;"	m	class:RenderingSwapchain	typeref:typename:std::vector<RenderingFramebuffer>
getApplicationInfo	./Rendering/InstanceHelpers.cpp	/^VkApplicationInfo getApplicationInfo()$/;"	f	typeref:typename:VkApplicationInfo
getAttachmentDescriptions	./Rendering/RenderPassHelpers.cpp	/^std::vector<VkAttachmentDescription> getAttachmentDescriptions()$/;"	f	typeref:typename:std::vector<VkAttachmentDescription>
getAttributeBindings	./Rendering/GraphicsPipelineHelpers.cpp	/^std::vector<VkVertexInputAttributeDescription> getAttributeBindings()$/;"	f	typeref:typename:std::vector<VkVertexInputAttributeDescription>
getColorBlendAttachmentInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineColorBlendAttachmentState getColorBlendAttachmentInfo()$/;"	f	typeref:typename:VkPipelineColorBlendAttachmentState
getColorBlendInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineColorBlendStateCreateInfo getColorBlendInfo($/;"	f	typeref:typename:VkPipelineColorBlendStateCreateInfo
getCompositeAlpha	./Rendering/RenderingSwapchain.cpp	/^VkCompositeAlphaFlagBitsKHR getCompositeAlpha(VkSurfaceCapabilitiesKHR surfaceCapabilities)$/;"	f	typeref:typename:VkCompositeAlphaFlagBitsKHR
getDebuggerCreateInfo	./Rendering/DebugUtilsMessengerHelpers.cpp	/^VkDebugUtilsMessengerCreateInfoEXT getDebuggerCreateInfo()$/;"	f	typeref:typename:VkDebugUtilsMessengerCreateInfoEXT
getFileData	./Utility/Utility.cpp	/^std::vector<char> getFileData(const char* filename)$/;"	f	typeref:typename:std::vector<char>
getFramebuffer	./Rendering/RenderingSwapchain.cpp	/^RenderingFramebuffer& RenderingSwapchain::getFramebuffer(uint32_t imageIndex)$/;"	f	class:RenderingSwapchain	typeref:typename:RenderingFramebuffer &
getFunction_vkCreateDebugUtilsMessengerEXT	./VulkanWrappers/DebugUtilsMessenger.cpp	/^PFN_vkCreateDebugUtilsMessengerEXT getFunction_vkCreateDebugUtilsMessengerEXT(VkInstance instanc/;"	f	typeref:typename:PFN_vkCreateDebugUtilsMessengerEXT
getFunction_vkDestroyDebugUtilsMessengerEXT	./VulkanWrappers/DebugUtilsMessenger.cpp	/^PFN_vkDestroyDebugUtilsMessengerEXT getFunction_vkDestroyDebugUtilsMessengerEXT(VkInstance insta/;"	f	typeref:typename:PFN_vkDestroyDebugUtilsMessengerEXT
getGraphicsQueueFamily	./Rendering/RenderingDevice.cpp	/^const QueueFamily& RenderingDevice::getGraphicsQueueFamily()$/;"	f	class:RenderingDevice	typeref:typename:const QueueFamily &
getHandle	./GLFWwrappers/Window.cpp	/^GLFWwindow* Window::getHandle()$/;"	f	class:Window	typeref:typename:GLFWwindow *
getHandle	./VulkanWrappers/CommandPool.cpp	/^VkCommandPool CommandPool::getHandle()$/;"	f	class:CommandPool	typeref:typename:VkCommandPool
getHandle	./VulkanWrappers/DebugUtilsMessenger.cpp	/^VkDebugUtilsMessengerEXT DebugUtilsMessenger::getHandle()$/;"	f	class:DebugUtilsMessenger	typeref:typename:VkDebugUtilsMessengerEXT
getHandle	./VulkanWrappers/Fence.cpp	/^VkFence Fence::getHandle()$/;"	f	class:Fence	typeref:typename:VkFence
getHandle	./VulkanWrappers/Framebuffer.cpp	/^VkFramebuffer Framebuffer::getHandle()$/;"	f	class:Framebuffer	typeref:typename:VkFramebuffer
getHandle	./VulkanWrappers/ImageView.cpp	/^VkImageView ImageView::getHandle()$/;"	f	class:ImageView	typeref:typename:VkImageView
getHandle	./VulkanWrappers/Instance.cpp	/^VkInstance Instance::getHandle()$/;"	f	class:Instance	typeref:typename:VkInstance
getHandle	./VulkanWrappers/LogicalDevice.cpp	/^VkDevice LogicalDevice::getHandle()$/;"	f	class:LogicalDevice	typeref:typename:VkDevice
getHandle	./VulkanWrappers/Pipeline.cpp	/^VkPipeline Pipeline::getHandle()$/;"	f	class:Pipeline	typeref:typename:VkPipeline
getHandle	./VulkanWrappers/PipelineLayout.cpp	/^VkPipelineLayout PipelineLayout::getHandle()$/;"	f	class:PipelineLayout	typeref:typename:VkPipelineLayout
getHandle	./VulkanWrappers/RenderPass.cpp	/^VkRenderPass RenderPass::getHandle()$/;"	f	class:RenderPass	typeref:typename:VkRenderPass
getHandle	./VulkanWrappers/Semaphore.cpp	/^VkSemaphore Semaphore::getHandle()$/;"	f	class:Semaphore	typeref:typename:VkSemaphore
getHandle	./VulkanWrappers/ShaderModule.cpp	/^VkShaderModule ShaderModule::getHandle()$/;"	f	class:ShaderModule	typeref:typename:VkShaderModule
getHandle	./VulkanWrappers/Surface.cpp	/^VkSurfaceKHR Surface::getHandle()$/;"	f	class:Surface	typeref:typename:VkSurfaceKHR
getHandle	./VulkanWrappers/Swapchain.cpp	/^VkSwapchainKHR Swapchain::getHandle()$/;"	f	class:Swapchain	typeref:typename:VkSwapchainKHR
getImageExtent	./Rendering/RenderingSwapchain.cpp	/^VkExtent2D getImageExtent(VkSurfaceCapabilitiesKHR surfaceCapabilities, GLFWwindow* window)$/;"	f	typeref:typename:VkExtent2D
getInputAssemblyInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineInputAssemblyStateCreateInfo getInputAssemblyInfo()$/;"	f	typeref:typename:VkPipelineInputAssemblyStateCreateInfo
getMessageSeverityString	./Rendering/DebugUtilsMessengerHelpers.cpp	/^const char* getMessageSeverityString(VkDebugUtilsMessageSeverityFlagBitsEXT severityFlag)$/;"	f	typeref:typename:const char *
getMessageTypesString	./Rendering/DebugUtilsMessengerHelpers.cpp	/^std::string getMessageTypesString(VkDebugUtilsMessageTypeFlagsEXT typeFlags)$/;"	f	typeref:typename:std::string
getMinImageCount	./Rendering/RenderingSwapchain.cpp	/^uint32_t getMinImageCount(VkSurfaceCapabilitiesKHR surfaceCapabilities)$/;"	f	typeref:typename:uint32_t
getMultisampleInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineMultisampleStateCreateInfo getMultisampleInfo()$/;"	f	typeref:typename:VkPipelineMultisampleStateCreateInfo
getOutputReference	./Rendering/RenderPassHelpers.cpp	/^VkAttachmentReference getOutputReference()$/;"	f	typeref:typename:VkAttachmentReference
getPhysicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^VkPhysicalDevice LogicalDevice::getPhysicalDevice()$/;"	f	class:LogicalDevice	typeref:typename:VkPhysicalDevice
getPhysicalDeviceQueueFamilyProperties	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkQueueFamilyProperties> getPhysicalDeviceQueueFamilyProperties(VkPhysicalDev/;"	f	typeref:typename:std::vector<VkQueueFamilyProperties>
getPhysicalDeviceSurfaceFormatsKHR	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkSurfaceFormatKHR> getPhysicalDeviceSurfaceFormatsKHR($/;"	f	typeref:typename:std::vector<VkSurfaceFormatKHR>
getPreTransform	./Rendering/RenderingSwapchain.cpp	/^VkSurfaceTransformFlagBitsKHR getPreTransform(VkSurfaceCapabilitiesKHR surfaceCapabilities)$/;"	f	typeref:typename:VkSurfaceTransformFlagBitsKHR
getPresentQueueFamily	./Rendering/RenderingDevice.cpp	/^const QueueFamily& RenderingDevice::getPresentQueueFamily()$/;"	f	class:RenderingDevice	typeref:typename:const QueueFamily &
getQueueCreateInfos	./Rendering/RenderingDevice.cpp	/^std::vector<VkDeviceQueueCreateInfo> getQueueCreateInfos(VkInstance instance, VkPhysicalDevice p/;"	f	typeref:typename:std::vector<VkDeviceQueueCreateInfo>
getQueueFamily	./VulkanWrappers/LogicalDevice.cpp	/^const QueueFamily& LogicalDevice::getQueueFamily(size_t index)$/;"	f	class:LogicalDevice	typeref:typename:const QueueFamily &
getQueueFamilyCount	./VulkanWrappers/LogicalDevice.cpp	/^size_t LogicalDevice::getQueueFamilyCount()$/;"	f	class:LogicalDevice	typeref:typename:size_t
getQueueHandles	./VulkanWrappers/LogicalDevice.cpp	/^std::vector<QueueFamily> getQueueHandles(VkDevice device, const VkDeviceCreateInfo& createInfo)$/;"	f	typeref:typename:std::vector<QueueFamily>
getRasterizationInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineRasterizationStateCreateInfo getRasterizationInfo()$/;"	f	typeref:typename:VkPipelineRasterizationStateCreateInfo
getRenderArea	./Rendering/RenderingManager.cpp	/^VkRect2D RenderingManager::getRenderArea()$/;"	f	class:RenderingManager	typeref:typename:VkRect2D
getRenderArea	Rendering/RenderingManager.cpp	/^VkRect2D RenderingManager::getRenderArea()$/;"	f	class:RenderingManager	typeref:typename:VkRect2D
getRequiredDeviceExtensions	./Rendering/RenderingDevice.cpp	/^std::vector<const char*> getRequiredDeviceExtensions()$/;"	f	typeref:typename:std::vector<const char * >
getRequiredExtensions	./Rendering/InstanceHelpers.cpp	/^std::vector<const char*> getRequiredExtensions()$/;"	f	typeref:typename:std::vector<const char * >
getRequiredFeatures	./Rendering/RenderingDevice.cpp	/^VkPhysicalDeviceFeatures getRequiredFeatures()$/;"	f	typeref:typename:VkPhysicalDeviceFeatures
getRequiredLayers	./Rendering/InstanceHelpers.cpp	/^std::vector<const char*> getRequiredLayers()$/;"	f	typeref:typename:std::vector<const char * >
getScissor	./Rendering/GraphicsPipelineHelpers.cpp	/^VkRect2D getScissor(GLFWwindow* window)$/;"	f	typeref:typename:VkRect2D
getShaderStageInfos	./Rendering/GraphicsPipelineHelpers.cpp	/^std::vector<VkPipelineShaderStageCreateInfo> getShaderStageInfos($/;"	f	typeref:typename:std::vector<VkPipelineShaderStageCreateInfo>
getSubpassDescriptions	./Rendering/RenderPassHelpers.cpp	/^std::vector<VkSubpassDescription> getSubpassDescriptions(const VkAttachmentReference& outputRefe/;"	f	typeref:typename:std::vector<VkSubpassDescription>
getSwapchainImagesKHR	./VulkanWrappers/EnumerationHelpers.h	/^inline std::vector<VkImage> getSwapchainImagesKHR($/;"	f	typeref:typename:std::vector<VkImage>
getVertexBindings	./Rendering/GraphicsPipelineHelpers.cpp	/^std::vector<VkVertexInputBindingDescription> getVertexBindings()$/;"	f	typeref:typename:std::vector<VkVertexInputBindingDescription>
getVertexInputInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineVertexInputStateCreateInfo getVertexInputInfo($/;"	f	typeref:typename:VkPipelineVertexInputStateCreateInfo
getViewport	./Rendering/GraphicsPipelineHelpers.cpp	/^VkViewport getViewport(GLFWwindow* window)$/;"	f	typeref:typename:VkViewport
getViewportInfo	./Rendering/GraphicsPipelineHelpers.cpp	/^VkPipelineViewportStateCreateInfo getViewportInfo($/;"	f	typeref:typename:VkPipelineViewportStateCreateInfo
glfwErrorCallback	./GLFWwrappers/GLFWmanager.cpp	/^void glfwErrorCallback(int errorCode, const char* description)$/;"	f	typeref:typename:void
graphicsFamilyIndex	./Rendering/RenderingDevice.h	/^    size_t graphicsFamilyIndex, presentFamilyIndex;$/;"	m	class:RenderingDevice	typeref:typename:size_t
graphicsPipeline	./Rendering/RenderingManager.h	/^    Pipeline graphicsPipeline;$/;"	m	class:RenderingManager	typeref:typename:Pipeline
handle	./VulkanWrappers/CommandPool.h	/^    VkCommandPool handle;$/;"	m	class:CommandPool	typeref:typename:VkCommandPool
handle	./VulkanWrappers/DebugUtilsMessenger.h	/^    VkDebugUtilsMessengerEXT handle;$/;"	m	class:DebugUtilsMessenger	typeref:typename:VkDebugUtilsMessengerEXT
handle	./VulkanWrappers/Fence.h	/^    VkFence handle;$/;"	m	class:Fence	typeref:typename:VkFence
handle	./VulkanWrappers/Framebuffer.h	/^    VkFramebuffer handle;$/;"	m	class:Framebuffer	typeref:typename:VkFramebuffer
handle	./VulkanWrappers/ImageView.h	/^    VkImageView handle;$/;"	m	class:ImageView	typeref:typename:VkImageView
handle	./VulkanWrappers/Instance.h	/^    VkInstance handle;$/;"	m	class:Instance	typeref:typename:VkInstance
handle	./VulkanWrappers/LogicalDevice.h	/^    VkDevice handle;$/;"	m	class:LogicalDevice	typeref:typename:VkDevice
handle	./VulkanWrappers/Pipeline.h	/^    VkPipeline handle;$/;"	m	class:Pipeline	typeref:typename:VkPipeline
handle	./VulkanWrappers/PipelineLayout.h	/^    VkPipelineLayout handle;$/;"	m	class:PipelineLayout	typeref:typename:VkPipelineLayout
handle	./VulkanWrappers/RenderPass.h	/^    VkRenderPass handle;$/;"	m	class:RenderPass	typeref:typename:VkRenderPass
handle	./VulkanWrappers/Semaphore.h	/^    VkSemaphore handle;$/;"	m	class:Semaphore	typeref:typename:VkSemaphore
handle	./VulkanWrappers/ShaderModule.h	/^    VkShaderModule handle;$/;"	m	class:ShaderModule	typeref:typename:VkShaderModule
handle	./VulkanWrappers/Surface.h	/^    VkSurfaceKHR handle;$/;"	m	class:Surface	typeref:typename:VkSurfaceKHR
handle	./VulkanWrappers/Swapchain.h	/^    VkSwapchainKHR handle;$/;"	m	class:Swapchain	typeref:typename:VkSwapchainKHR
initVulkanAndGLFW	./GLFWwrappers/GLFWmanager.cpp	/^void GLFWmanager::initVulkanAndGLFW()$/;"	f	class:GLFWmanager	typeref:typename:void
instance	./GLFWwrappers/GLFWmanager.cpp	/^GLFWmanager* GLFWmanager::instance = nullptr;$/;"	m	class:GLFWmanager	typeref:typename:GLFWmanager *
instance	./GLFWwrappers/GLFWmanager.h	/^    static GLFWmanager* instance;$/;"	m	class:GLFWmanager	typeref:typename:GLFWmanager *
instance	./Rendering/RenderingManager.h	/^    Instance instance;$/;"	m	class:RenderingManager	typeref:typename:Instance
instance	./VulkanWrappers/DebugUtilsMessenger.h	/^    VkInstance instance;$/;"	m	class:DebugUtilsMessenger	typeref:typename:VkInstance
instance	./VulkanWrappers/Surface.h	/^    VkInstance instance;$/;"	m	class:Surface	typeref:typename:VkInstance
isASubsetOfB	./Utility/Utility.cpp	/^bool isASubsetOfB(const std::vector<const char*>& A, const std::vector<const char*>& B)$/;"	f	typeref:typename:bool
isPhysicalDeviceSuitable	./Rendering/RenderingDevice.cpp	/^bool isPhysicalDeviceSuitable(VkInstance instance, VkPhysicalDevice physicalDevice, VkSurfaceKHR/;"	f	typeref:typename:bool
main	./main.cpp	/^int main()$/;"	f	typeref:typename:int
operator =	./Rendering/RenderingDevice.cpp	/^RenderingDevice& RenderingDevice::operator=(RenderingDevice&& rhs)$/;"	f	class:RenderingDevice	typeref:typename:RenderingDevice &
operator =	./Rendering/RenderingFramebuffer.cpp	/^RenderingFramebuffer& RenderingFramebuffer::operator=(RenderingFramebuffer&& rhs)$/;"	f	class:RenderingFramebuffer	typeref:typename:RenderingFramebuffer &
operator =	./Rendering/RenderingSwapchain.cpp	/^RenderingSwapchain& RenderingSwapchain::operator=(RenderingSwapchain&& rhs)$/;"	f	class:RenderingSwapchain	typeref:typename:RenderingSwapchain &
operator =	./VulkanWrappers/CommandPool.cpp	/^CommandPool& CommandPool::operator=(CommandPool&& rhs)$/;"	f	class:CommandPool	typeref:typename:CommandPool &
operator =	./VulkanWrappers/DebugUtilsMessenger.cpp	/^DebugUtilsMessenger& DebugUtilsMessenger::operator=(DebugUtilsMessenger&& rhs)$/;"	f	class:DebugUtilsMessenger	typeref:typename:DebugUtilsMessenger &
operator =	./VulkanWrappers/Fence.cpp	/^Fence& Fence::operator=(Fence&& rhs)$/;"	f	class:Fence	typeref:typename:Fence &
operator =	./VulkanWrappers/Framebuffer.cpp	/^Framebuffer& Framebuffer::operator=(Framebuffer&& rhs)$/;"	f	class:Framebuffer	typeref:typename:Framebuffer &
operator =	./VulkanWrappers/ImageView.cpp	/^ImageView& ImageView::operator=(ImageView&& rhs)$/;"	f	class:ImageView	typeref:typename:ImageView &
operator =	./VulkanWrappers/Instance.cpp	/^Instance& Instance::operator=(Instance&& rhs)$/;"	f	class:Instance	typeref:typename:Instance &
operator =	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice& LogicalDevice::operator=(LogicalDevice&& rhs)$/;"	f	class:LogicalDevice	typeref:typename:LogicalDevice &
operator =	./VulkanWrappers/Pipeline.cpp	/^Pipeline& Pipeline::operator=(Pipeline&& rhs)$/;"	f	class:Pipeline	typeref:typename:Pipeline &
operator =	./VulkanWrappers/PipelineLayout.cpp	/^PipelineLayout& PipelineLayout::operator=(PipelineLayout&& rhs)$/;"	f	class:PipelineLayout	typeref:typename:PipelineLayout &
operator =	./VulkanWrappers/RenderPass.cpp	/^RenderPass& RenderPass::operator=(RenderPass&& rhs)$/;"	f	class:RenderPass	typeref:typename:RenderPass &
operator =	./VulkanWrappers/Semaphore.cpp	/^Semaphore& Semaphore::operator=(Semaphore&& rhs)$/;"	f	class:Semaphore	typeref:typename:Semaphore &
operator =	./VulkanWrappers/ShaderModule.cpp	/^ShaderModule& ShaderModule::operator=(ShaderModule&& rhs)$/;"	f	class:ShaderModule	typeref:typename:ShaderModule &
operator =	./VulkanWrappers/Surface.cpp	/^Surface& Surface::operator=(Surface&& rhs)$/;"	f	class:Surface	typeref:typename:Surface &
operator =	./VulkanWrappers/Swapchain.cpp	/^Swapchain& Swapchain::operator=(Swapchain&& rhs)$/;"	f	class:Swapchain	typeref:typename:Swapchain &
outputImageView	./Rendering/RenderingFramebuffer.h	/^    ImageView outputImageView;$/;"	m	class:RenderingFramebuffer	typeref:typename:ImageView
physicalDevice	./VulkanWrappers/LogicalDevice.h	/^    VkPhysicalDevice physicalDevice;$/;"	m	class:LogicalDevice	typeref:typename:VkPhysicalDevice
pipelineLayout	./Rendering/RenderingManager.h	/^    PipelineLayout pipelineLayout;$/;"	m	class:RenderingManager	typeref:typename:PipelineLayout
position	./Rendering/Vertex.h	/^    vec3 position, color;$/;"	m	struct:Vertex	typeref:typename:vec3
presentFamilyIndex	./Rendering/RenderingDevice.h	/^    size_t graphicsFamilyIndex, presentFamilyIndex;$/;"	m	class:RenderingDevice	typeref:typename:size_t
queueFamilies	./VulkanWrappers/LogicalDevice.h	/^    std::vector<QueueFamily> queueFamilies;$/;"	m	class:LogicalDevice	typeref:typename:std::vector<QueueFamily>
queueFamilyIndex	./VulkanWrappers/LogicalDevice.h	/^    uint32_t queueFamilyIndex;$/;"	m	struct:QueueFamily	typeref:typename:uint32_t
queues	./VulkanWrappers/LogicalDevice.h	/^    std::vector<VkQueue> queues;$/;"	m	struct:QueueFamily	typeref:typename:std::vector<VkQueue>
recordCommandBuffer	./Rendering/RenderingManager.cpp	/^void RenderingManager::recordCommandBuffer(const std::vector<Vertex>& buffer, uint32_t imageInde/;"	f	class:RenderingManager	typeref:typename:void
recordCommandBuffer	Rendering/RenderingManager.cpp	/^void RenderingManager::recordCommandBuffer(const std::vector<Vertex>& buffer, uint32_t imageInde/;"	f	class:RenderingManager	typeref:typename:void
renderPass	./Rendering/RenderingManager.h	/^    RenderPass renderPass;$/;"	m	class:RenderingManager	typeref:typename:RenderPass
setupFramebuffers	./Rendering/RenderingSwapchain.cpp	/^void RenderingSwapchain::setupFramebuffers(VkDevice device, VkRenderPass renderPass, GLFWwindow*/;"	f	class:RenderingSwapchain	typeref:typename:void
shouldLoop	./Rendering/RenderingManager.cpp	/^bool RenderingManager::shouldLoop()$/;"	f	class:RenderingManager	typeref:typename:bool
shouldLoop	Rendering/RenderingManager.cpp	/^bool RenderingManager::shouldLoop()$/;"	f	class:RenderingManager	typeref:typename:bool
swapchain	./Rendering/RenderingManager.h	/^    RenderingSwapchain swapchain;$/;"	m	class:RenderingManager	typeref:typename:RenderingSwapchain
vec3	./Rendering/Vertex.h	/^struct vec3$/;"	s
vertices	./main.cpp	/^static std::vector<Vertex> vertices = {$/;"	v	typeref:typename:std::vector<Vertex>	file:
window	./GLFWwrappers/Window.h	/^    GLFWwindow* window;$/;"	m	class:Window	typeref:typename:GLFWwindow *
window	./Rendering/RenderingManager.h	/^    Window window;$/;"	m	class:RenderingManager	typeref:typename:Window
windowSurface	./Rendering/RenderingManager.h	/^    Surface windowSurface;$/;"	m	class:RenderingManager	typeref:typename:Surface
wrongVirus	./CMakeLists.txt	/^add_executable(wrongVirus main.cpp)$/;"	t
x	./Rendering/Vertex.h	/^    float x, y, z;$/;"	m	struct:vec3	typeref:typename:float
y	./Rendering/Vertex.h	/^    float x, y, z;$/;"	m	struct:vec3	typeref:typename:float
z	./Rendering/Vertex.h	/^    float x, y, z;$/;"	m	struct:vec3	typeref:typename:float
~CommandPool	./VulkanWrappers/CommandPool.cpp	/^CommandPool::~CommandPool()$/;"	f	class:CommandPool
~DebugUtilsMessenger	./VulkanWrappers/DebugUtilsMessenger.cpp	/^DebugUtilsMessenger::~DebugUtilsMessenger()$/;"	f	class:DebugUtilsMessenger
~Fence	./VulkanWrappers/Fence.cpp	/^Fence::~Fence()$/;"	f	class:Fence
~Framebuffer	./VulkanWrappers/Framebuffer.cpp	/^Framebuffer::~Framebuffer()$/;"	f	class:Framebuffer
~GLFWmanager	./GLFWwrappers/GLFWmanager.cpp	/^GLFWmanager::~GLFWmanager()$/;"	f	class:GLFWmanager
~ImageView	./VulkanWrappers/ImageView.cpp	/^ImageView::~ImageView()$/;"	f	class:ImageView
~Instance	./VulkanWrappers/Instance.cpp	/^Instance::~Instance()$/;"	f	class:Instance
~LogicalDevice	./VulkanWrappers/LogicalDevice.cpp	/^LogicalDevice::~LogicalDevice()$/;"	f	class:LogicalDevice
~Pipeline	./VulkanWrappers/Pipeline.cpp	/^Pipeline::~Pipeline()$/;"	f	class:Pipeline
~PipelineLayout	./VulkanWrappers/PipelineLayout.cpp	/^PipelineLayout::~PipelineLayout()$/;"	f	class:PipelineLayout
~RenderPass	./VulkanWrappers/RenderPass.cpp	/^RenderPass::~RenderPass()$/;"	f	class:RenderPass
~RenderingManager	./Rendering/RenderingManager.cpp	/^RenderingManager::~RenderingManager()$/;"	f	class:RenderingManager
~RenderingManager	Rendering/RenderingManager.cpp	/^RenderingManager::~RenderingManager()$/;"	f	class:RenderingManager
~Semaphore	./VulkanWrappers/Semaphore.cpp	/^Semaphore::~Semaphore()$/;"	f	class:Semaphore
~ShaderModule	./VulkanWrappers/ShaderModule.cpp	/^ShaderModule::~ShaderModule()$/;"	f	class:ShaderModule
~Surface	./VulkanWrappers/Surface.cpp	/^Surface::~Surface()$/;"	f	class:Surface
~Swapchain	./VulkanWrappers/Swapchain.cpp	/^Swapchain::~Swapchain()$/;"	f	class:Swapchain
~Window	./GLFWwrappers/Window.cpp	/^Window::~Window()$/;"	f	class:Window
